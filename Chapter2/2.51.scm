#lang sicp
(define (transform-painter painter origin corner1 corner2)
    (lambda (frame)
        (let ((m (frame-coord-map frame)))
            (let ((new-origin (m origin)))
                (painter 
                    (make-frame new-origin
                                (sub-vect (m corner1) new-origin)
                                (sub-vect (m corner2) new-origin)
                    )
                )
            )
        )
    )
)

(define (beside painter1 painter2)
    (let ((split-vect (make-vect 0.5 0.0)))
        (let ((paint-left (transform-painter painter1 (make-vect 0.0 0.0) split-vect (make-vect 0.0 1.0)))
              (paint-right (transform-painter painter2 split-vect (make-vect 1.0 0.0) (make-vect 0.5 1.0)))
             )
            (lambda (frame)
                (paint-left frame)
                (paint-right frame)
            )
        )
    )
)

(define (below p1 p2)
    (let ((split-vect (make-vect 0.0 0.5)))
        (let ((paint-d (transform-painter p1 (make-vect 0.0 0.0) (make-vect 1.0 0.0) split-vect))
              (paint-u (transform-painter p2 split-vect (make-vect 1.0 0.5) (make-vect 0.0 1.0)))
             )
            (lambda (frame)
                (paint-u frame)
                (paint-d frame)
            )
        )
    )
)

;首先将p1p2 左右拼接，然后再逆时针旋转90度
(define (below p1 p2)
    (rotate90 (beside (rotate270 p1) (rotate270 p2)))
)
