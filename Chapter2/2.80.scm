#lang racket
(#%require "../racket-common.scm")
; (define (=zero? x) (apply-generic `=zero? x))

; (define (install-scheme-number-package)
;     ...
;     (put `=zero? `(scheme-number) zero?)
; )

; (define (install-rational-package)
;     ...
;     (put `=zero? `(rational) 
;          (lambda (x) (zero? (numer x)))
;     )
; )

; (define (install-complex-package)
;     ...
;     (put `=zero? `(complex) 
;         (lambda (x) (and (zero? (real-part x)) (zero? (imag-part x)))) 
;     )
; )
#|
通用型算术运算，通用算术包
|#
;;以下是复数运算包
(define (install-rectangular-package)
    ;;internal procedures
    (define (real-part z) (car z))
    (define (imag-part z) (cdr z))
    (define (make-from-real-imag x y) (cons x y))
    (define (magnitude z)
        (sqrt (+ (square (real-part z)) (square (imag-part z))))
    )
    (define (angle z)
        (atan (imag-part z) (real-part z))
    )
    (define (make-from-mag-ang r a)
        (cons (* r (cos a)) (* r (sin a)))
    )
    (define (equ? z1 z2)
        (and (= (real-part z1) (real-part z2)) (= (imag-part z2) (imag-part z1)))
    )
    (define (=zero? z)
        (and (zero? (real-part z)) (zero? (imag-part z)))
    )
    ;;interface to the rest of system
    (define (tag x) (attach-tag `rectangular x))
    (put `equ? `(rectangular rectangular) equ?)
    (put `=zero? `(rectangular) =zero?)

    (put `real-part `(rectangular) real-part)
    (put `imag-part `(rectangular) imag-part)
    (put `magnitude `(rectangular) magnitude)
    (put `angle `(rectangular) angle) 
    (put `make-from-real-imag `rectangular 
         (lambda (x y) (tag (make-from-real-imag x y)))
    )
    (put `make-from-mag-ang `rectangular
         (lambda (r a) (tag (make-from-mag-ang r a)))
    )
    `done
)
(define (install-polar-package)
    ;;internal procedures
    (define (magnitude z) (car z))
    (define (angle z) (cdr z))
    (define (make-from-mag-ang r a) (cons r a))
    (define (real-part z)
        (* (magnitude z) (cos (angle z)))
    )
    (define (imag-part z)
        (* (magnitude z) (sin (angle z)))
    )
    (define (make-from-real-imag x y)
        (cons (sqrt (+ (square x) (square y))) (atan y x))
    )
    (define (equ? z1 z2)
        (and (= (magnitude z1) (magnitude z2)) (= (angle z1) (angle z2)))
    )
    (define (=zero? z) (zero? (magnitude z))
    )
    ;;interface to the rest of the system
    (define (tag x) (attach-tag `polar x))
    (put `equ? `(polar polar) equ?)
    (put `=zero? `(polar) =zero?)

    (put `real-part `(polar) real-part)
    (put `imag-part `(polar) imag-part)
    (put `magnitude `(polar) magnitude)
    (put `angle `(polar) angle)
    (put `make-from-real-imag `polar
         (lambda (x y) (tag (make-from-real-imag x y)))
    )
    (put `make-from-mag-ang `polar
         (lambda (r a) (tag (make-from-mag-ang r a)))
    )
    `done
)
(install-rectangular-package)
(install-polar-package)

;;integer
(define (install-scheme-number-package)
    ;;interface
    (define (tag x) (attach-tag `scheme-number x))
    (put `equ? `(scheme-number scheme-number) =)
    (put `=zero? `(scheme-number) zero?)
    (put `add `(scheme-number scheme-number)
        (lambda (x y) (tag (+ x y)))
    )
    (put `sub `(scheme-number scheme-number)
        (lambda (x y) (tag (- x y)))
    )
    (put `mul `(scheme-number scheme-number)
        (lambda (x y) (tag (* x y)))
    )
    (put `div `(scheme-number scheme-number)
        (lambda (x y) (tag (/ x y)))
    )
    (put `make `scheme-number (lambda (x) (tag x)))
    `done
)
(define (make-scheme-number n)
    ((get `make `scheme-number) n)
)

;;rational
(define (install-rational-package)
    ;;internal procedures
    (define (numer x) (car x))
    (define (denom x) (cdr x))
    (define (make-rat n d)
        (let ((g (gcd n d)))
            (cons (/ n g) (/ d g))
        )
    )
    (define (add-rat x y)
        (make-rat (+ (* (numer x) (denom y)) (* (numer y) (denom x)))
                  (* (denom x) (denom y))
        )
    )
    (define (sub-rat x y)
        (make-rat (- (* (numer x) (denom y)) (* (numer y) (denom x)))
                  (* (denom x) (denom y))
        )    
    )
    (define (mul-rat x y)
        (make-rat (* (numer x) (* numer y)) (* (denom x) (denom y)))
    )
    (define (div-rat x y)
        (make-rat (* (numer x) (* denom y)) (* (denom x) (numer y)))
    )
    (define (equ? x y)
        (and (= (numer x) (numer y)) (= (denom x) (denom y)))
    )
    (define (=zero? x)
        (zero? (numer x))
    )
    ;;interface to rest of the system
    (define (tag x) (attach-tag `rational x))
    (put `equ? `(rational rational) equ?)
    (put `=zero? `(rational) =zero?)
    (put `add `(rational rational)
        (lambda (x y) (tag (add-rat x y)))
    )
    (put `sub `(rational rational)
        (lambda (x y) (tag (sub-rat x y)))
    )
    (put `mul `(rational rational)
        (lambda (x y) (tag (mul-rat x y)))
    )
    (put `div `(rational rational)
        (lambda (x y) (tag (div-rat x y)))
    )
    (put `make `rational (lambda (n d) (tag (make-rat n d))))
    `done
)
(define (make-rational n d) ((get `make `rational) n d))

;;complex
(define (install-complex-package)
    ;;imported procedures from rectangular and polar package
    (define (make-from-real-imag x y)
        ((get `make-from-real-imag `rectangular) x y)
    )
    (define (make-from-mag-ang r a)
        ((get `make-from-mag-ang `polar) r a)
    )
    ;;internal procedures
    (define (add-complex z1 z2)
        (make-from-real-imag (+ (real-part z1) (real-part z2))
                             (+ (imag-part z1) (imag-part z2))
        )
    )
    (define (sub-complex z1 z2)
        (make-from-real-imag (- (real-part z1) (real-part z2))
                             (- (imag-part z1) (imag-part z2))
        )
    )
    (define (mul-complex z1 z2)
        (make-from-mag-ang (* (magnitude z1) (magnitude z2))
                           (+ (angle z1) (angle z2))
        )
    )
    (define (div-complex z1 z2)
        (make-from-mag-ang (/ (magnitude z1) (magnitude z2))
                           (- (angle z1) (angle z2))
        )
    )
    ;;interface to rest of the system
    (define (tag z) (attach-tag `complex z))
    ;;
    (put `equ? `(complex complex) equ?)
    (put `=zero? `(complex) =zero?)
    ;;
    (put `real-part `(complex) real-part)
    (put `imag-part `(complex) imag-part)
    (put `magnitude `(complex) magnitude)
    (put `angle `(complex) angle)
    ;;
    (put `add `(complex complex) (lambda (z1 z2) (tag (add-complex z1 z2))))
    (put `sub `(complex complex) (lambda (z1 z2) (tag (sub-complex z1 z2))))
    (put `mul `(complex complex) (lambda (z1 z2) (tag (mul-complex z1 z2))))
    (put `div `(complex complex) (lambda (z1 z2) (tag (div-complex z1 z2))))
    (put `make-from-real-imag `complex
        (lambda (x y) (tag (make-from-real-imag x y)))
    )
    (put `make-from-mag-ang `complex
        (lambda (r a) (tag (make-from-mag-ang r a)))
    )
    `done
)
(define (make-complex-from-real-imag x y)
    ((get `make-from-real-imag `complex) x y)
)
(define (make-complex-from-mag-ang r a)
    ((get `make-from-mag-ang `complex) r a)
)
(define (real-part z) (apply-generic `real-part z))
(define (imag-part z) (apply-generic `imag-part z))
(define (magnitude z) (apply-generic `magnitude z))
(define (angle z) (apply-generic `angle z))
(define (equ? x y) (apply-generic `equ? x y))
(define (=zero? x) (apply-generic `=zero? x))


(install-scheme-number-package)
(install-rational-package)
(install-complex-package)

(=zero? 0.00)
(define r0 (make-rational 0 9))
r0
(=zero? r0)
(define z1 (make-complex-from-real-imag 0 0))
z1
(=zero? z1)
(define z2 (make-complex-from-mag-ang 0 9))
z2
(=zero? z2)
(add 10 2)

(add z1 z2)