#lang sicp


(define (element-of-set? x set)
    (cond ((null? set) false)
          ((= x (car set)) true)
          ((< x (car set)) false)
          (else
            (element-of-set? x (cdr set))
          )
    )
)

(define (intersection-set set1 set2)
    (if (or (null? set1) (null? set2))
        `()
        (let ((x1 (car set1))
              (x2 (car set2))
             )
             (cond ((= x1 x2)
                    (cons x1 (intersection-set (cdr set1) (cdr set2)))
                   )
                   ((< x1 x2)
                    (intersection-set (cdr set1) set2)
                   )
                   ((> x1 x2)
                    (intersection-set set1 (cdr set2))
                   )
             )
        )
    )
)

(define (adjoin x set)
    (if (null? set)
        (list x)
        (let ((head (car set))
              (tail (cdr set))
             )
             (cond ((= x head) set)
                   ((> x head) (cons head (adjoin x tail)))
                   ((< x head) (cons x set))
             )
        )
    )
)

(define (union-set set1 set2)
    (cond ((null? set1) set2)
          ((null? set2) set1)
          ((and (null? set1) (null? set2)) `())
          (else
            (let ((h1 (car set1))
                  (t1 (cdr set1))
                  (h2 (car set2))
                  (t2 (cdr set2))
                 )
                 (cond ((= h1 h2) (cons h1 (union-set t1 t2)))
                       ((< h1 h2) (cons h1 (union-set t1 set2)))
                       ((> h1 h2) (cons h2 (union-set set1 t2)))
                 )
            )
          )
    )
)

(define aset `(1 4 11))
(define bset `(0 2 4 5 6 9))

(union-set aset bset)
